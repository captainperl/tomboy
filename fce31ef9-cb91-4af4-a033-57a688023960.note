<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>perl code</title>
  <text xml:space="preserve"><note-content version="0.1">perl code
---------------------------------------------------
@ARGV variable with arguments from perl command line arguments
----------------------------------------------
 $size = scalar keys %hash;   number of element in hash
---------------------------------------------------------
FindBin::libs   in cpan
---------------------------------------------------------
How can I see if a Perl hash already has a certain key?
if (exists $strings{$string}) {
    ...
} else {
    ...
}
------------------------------------------------------------------
null and not valid arguments:
sub mysub {
    my ($arg1) = @_;
    if (@_ &lt; 1) {
        print "arg1 wasn't passed at all.\n";
    } elsif (!defined $arg1) {
        print "arg1 was passed as undef.\n";
    } elsif (!$arg1) {
        print "arg1 was passed as a defined but false value (empty string or 0)\n";
    } else {
        print "arg1 is a defined, non-false value: $arg1\n";
    }
}
-------------------------------------------------------------
Describe your new note here.Comands:
perl -MCPAN -e shell     for instaling new perl modules

add and display perl lib path
PERL5LIB=home/michal/Documents/mySvnRepositories/user-folcanm4/TomboyParser/bin/lib; export PERL5LIB
perl -e "print qq(@INC)"

----------------------------------------------------
DateTime.UtcNow.ToString("yyyy-MM-ddTHH\:mm\:ss.fffffffzzz");    in c++
output  2008-09-22T13:57:31.2311892-04:00

--------------------------------------------------

Take a look at Text::CSV (for reading your CSV files into perl data structures) 
and Spreadsheet::WriteExcel (for writing that data back out in Excel format).

-----------------------------------------------
xml::libxml
The use sigtrap and even use diagnostics pragmas may also prove useful.


----------------------------------------
To copy the array, use(Reference)
    $aref2 = [@{$aref1}];

eq is for comparing strings
== is for comparing numbers

---
  #my( $this, $that, $tre, @tttt ) = @_;   
   #my $this = shift || dddd
   #return 0
---
regular expresion in if statement

$_ = $data;
if ( m/regex/ &amp;&amp; m/secondregex/ ) {..}
----------------------------------------
C:\Users\Folcan\AppData\Roaming\Tomboy\notes
---------------------------------------
#!/usr/bin/perl
use strict;
use warnings;
my @arr = ("1aa","2aa","3aa","4aa","5aa","6aa","7as");
for(0..$#arr) { print "Number: $arr[$_] \n"; }
---------------------------------------
time

use DateTime;
$dt = DateTime-&gt;new( year   =&gt; 1974, month  =&gt; 11, day    =&gt; 30, hour   =&gt; 13, minute =&gt; 30, 
    second =&gt; 0, nanosecond =&gt; 500000000, time_zone =&gt; 'Asia/Taipei' );
$epoch_time  = $dt-&gt;epoch;









______________________________________________________
# ABOUT:
# 
# This is the Shadowcat Catalyst installer. Its purpose is to make it easier
# and quicker to get started with Catalyst development. In order to use it,
# make sure you have perl 5.8.1+, a make and a compiler, (nmake and dev-c++
# are good on windows), a configured CPAN.pm and Module::Build installed. Then
# run this script by executing
#
# <link:url>/path/to/perl</link:url> cat-install
#
# and go for a tea break. If anything breaks, please send the full build log
# and the output of perl -V to &lt;<link:url>cat-install@shadowcatsystems.co.uk&gt;</link:url> and we'll
# see what we can do. This script is still BETA though, so don't be too
# surprised if something *does* break.
#
# See <link:url>http://www.shadowcatsystems.co.uk/projects/catalyst/</link:url> for more information
# on the Catalyst project and Shadowcat's involvement with it.
#
# COPYRIGHT:
#
# This software is Copyright (c) 2006 Shadowcat Systems Limited
#                                     &lt;<link:url>mst@shadowcatsystems.co.uk&gt;</link:url>
# 
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of this license can be obtained
# from <link:url>www.gnu.org,</link:url> or by writing to the Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

package CPAN::Override;

$ENV{PERL_MM_USE_DEFAULT} = 1;

my $orig = CPAN::Distribution-&gt;can('new');

my $replace = sub {
  my $dist = $orig-&gt;(@_);
  my @bits = split('-', (split('/', $dist-&gt;normalize))[-1]);
  pop(@bits);
  my $o_pack = join('::', 'CPAN::Override::Distribution', @bits);
  if ($o_pack-&gt;isa('CPAN::Distribution')) {
    bless($dist, $o_pack);
  }
  return $dist;
};

{
  no warnings 'redefine';
  *CPAN::Distribution::new = \&amp;$replace;
}

package CPAN::Override::Distribution::Template::Toolkit;

use base qw/CPAN::Distribution/;

use strict;
use warnings;

sub make {
  my $self = shift;
  my %args = (DOCS =&gt; 'n', SPLASH =&gt; 'n', EXAMPLES =&gt; 'n', EXTRAS =&gt; 'n',
              DBI =&gt; 'n', LATEX =&gt; 'n', QUIET =&gt; 'n', ACCEPT =&gt; 'y');
  my $extra_args = join(' ', map { "TT_$_=".$args{$_} } keys %args);
  local $CPAN::Config-&gt;{makepl_arg} =
    $CPAN::Config-&gt;{makepl_arg}.' '.$extra_args;
  $self-&gt;SUPER::make(@_);
}

package CPAN::Override::Distribution::Module::Install;

use base qw/CPAN::Distribution/;

sub make {
  my $self = shift;
  $self-&gt;get;
  my $builddir = $self-&gt;dir;
  chdir($builddir) &amp;&amp; (!-f 'Makefile') &amp;&amp; do {
    my $perl = $self-&gt;perl;
    my $re_code = 's/^auto_install_now.*//; s/.*prerequisites_policy.*//;';
    if ($^O eq 'MSWin32') {
      $re_code .= ' s/^.*ExtUtils::ParseXS.*$//;';
       system(qq!$perl -p -i.bak -e "s/\n/\r\n/;" Makefile.PL!);
    }
    system(qq!$perl -p -i.bak -e "${re_code}" Makefile.PL!);
  };
  return $self-&gt;SUPER::make(@_);
}

1;


package main;

use CPAN;

if ($^O eq 'MSWin32') {
  system("ppm install Test-Simple");
  system("ppm install Spiffy");
  system("ppm install Test-Base");
  system("ppm install YAML");
  system("ppm install UNIVERSAL-require");
  system("ppm install Module-Pluggable-Fast");
  system("ppm install Class-Accessor");
  system("ppm install Test-use-ok");
  system("ppm install Sub-Uplevel");
  system("ppm install Test-Exception");
  system("ppm install UNIVERSAL-isa");
  system("ppm install UNIVERSAL-can");
  system("ppm install Test-MockObject");
  system("ppm install Data-Visitor");
  system("ppm install Test-Tester");
  system("ppm install Test-NoWarnings");
  system("ppm install Scalar-List-Utils");
  system("ppm install Tree-Simple");
  system("ppm install Tree-Simple-VisitorFactory");
  system("ppm install URI");
  system("ppm install Compress-Zlib");
  system("ppm install HTML-Tagset");
  system("ppm install HTML-Parser");
  system("ppm install libwww-perl");
  system("ppm install Class-Data-Inheritable");
  system("ppm install File-Modified");
  system("ppm install Module-Install");
  system("ppm install HTTP-Request-AsCGI");
  system("ppm install HTTP-Body");
  system("ppm install Text-SimpleTable");
  system("ppm install MIME-Types");
  system("ppm install AppConfig");
  system("ppm install Template-Toolkit");
  system("ppm install Path-Class");
  system("ppm install File-Copy-Recursive");
  system("ppm install Class-Inspector");
  system("ppm install Catalyst");
  install('Test::MockObject');
}

install('Catalyst');
-------------------------------------------------------
my $dt = DateTime-&gt;from_epoch( epoch =&gt; $withOutNano );
  my $year   = $dt-&gt;year;
  my $month  = $dt-&gt;month; # 1-12 - you can also use '$dt-&gt;mon'
  my $day    = $dt-&gt;day; # 1-31 - also 'day_of_month', 'mday'
  #$dow    = $dt-&gt;day_of_week; # 1-7 (Monday is 1) - also 'dow', 'wday'
  my $hour   = $dt-&gt;hour; # 0-23
  my $minute = $dt-&gt;minute; # 0-59 - also 'min'
  my $second = $dt-&gt;second; # 0-61 (leap seconds!) - also 'sec'
<link:url>///////////////////////////////////////////////////////////////////</link:url>

-----------------------------------------------------------------
<link:url>http://stackoverflow.com/questions/11955052/perl-xmllibxml-node-findnodesxpath-finds-nodes-it-shouldnt</link:url>

$ cat t4.pl
#!/usr/bin/perl
use strict;
use warnings;
use XML::LibXML;

my $xml=&lt;&lt;EndXML;
&lt;Envelope&gt;
  &lt;Body&gt;
    &lt;Reply&gt;
      &lt;List&gt;
        &lt;Item&gt;
          &lt;Id&gt;8b9a&lt;/Id&gt;
          &lt;Message&gt;
            &lt;Response&gt;
              &lt;Identifier&gt;55D&lt;/Identifier&gt;
            &lt;/Response&gt;
          &lt;/Message&gt;
        &lt;/Item&gt;
        &lt;Item&gt;
          &lt;Id&gt;5350&lt;/Id&gt;
          &lt;Message&gt;
            &lt;Response&gt;
              &lt;Identifier&gt;56D&lt;/Identifier&gt;
            &lt;/Response&gt;
          &lt;/Message&gt;
        &lt;/Item&gt;
      &lt;/List&gt;
    &lt;/Reply&gt;
  &lt;/Body&gt;
&lt;/Envelope&gt;
EndXML

my $foo = Foo-&gt;new();

my $parser = XML::LibXML-&gt;new();
my $doc    = $parser-&gt;parse_string($xml);
my @list   = $doc-&gt;getElementsByTagName('Item');
for my $item (@list) {
  my $id = get($item, 'Id');
  my @messages = $item-&gt;getElementsByLocalName('Message');
  for my $message (@messages) {
    my @children = $message-&gt;getChildNodes();
    for my $child (@children) {
      my $name = $child-&gt;nodeName;
      if ($name eq 'Response') {
        print "child is a Response\n";
        $foo-&gt;do($child, $id)
      } elsif ($name eq 'text') {
        # ignore whitespace between elements
      } else {
        print "child name is '$name'\n";
      }
    } # child
  } # Message
} # Item

# ..............................................

sub get {
  my ($node, $name) = @_;

  my $value = "(Element $name not found)";
  my @targets = $node-&gt;getElementsByTagName($name);

  if (@targets) {
    my $target = $targets[0];
    $value = $target-&gt;textContent;
  }

  return $value;
}

# ..............................................

package Foo;

sub new {
  my $self = {};
  bless $self;
  return $self;
}

sub do {
  my $self = shift;
  my ($node, $id) = @_;

  print '-'x70, "\n", ' 'x12, $node-&gt;toString(1), "\n", '-'x70, "\n";

  my @identifiers = $node-&gt;findnodes('//Identifier');
  print "do() found ", scalar @identifiers, " Identifiers\n";

  print "$id, ", $identifiers[0]-&gt;textContent, "\n\n";
}
-----------------------------------------
unlink(qw(all_foxml.catalog));    delte that file in curent directory
--------------------------------------
  eval{@ids1= $collectionStatistics-&gt;insert(\%result_hash)};
  if ($@)
  {
    print Dumper(\%result_hash);
    print $@;
  }
---------------------------------------------------</note-content></text>
  <last-change-date>2014-01-30T13:01:32.1198610+01:00</last-change-date>
  <last-metadata-change-date>2014-01-30T13:01:32.1208730+01:00</last-metadata-change-date>
  <create-date>2013-10-28T11:21:24.9953510+01:00</create-date>
  <cursor-position>10039</cursor-position>
  <selection-bound-position>10039</selection-bound-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:uni</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>